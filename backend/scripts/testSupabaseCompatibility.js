const supabaseStorage = require('../services/supabaseStorage');

/**
 * Script de test pour v√©rifier la compatibilit√© Supabase
 */
async function testSupabaseCompatibility() {
  console.log('üß™ Test de compatibilit√© Supabase Storage...');

  // V√©rifier les variables d'environnement
  console.log('\n0Ô∏è‚É£ V√©rification des variables d\'environnement...');
  const supabaseUrl = process.env.SUPABASE_URL;
  const supabaseKey = process.env.SUPABASE_ANON_KEY;
  
  if (!supabaseUrl || supabaseUrl === 'https://your-project.supabase.co') {
    console.error('‚ùå SUPABASE_URL non configur√© ou utilise la valeur par d√©faut');
    console.log('üìù Veuillez configurer SUPABASE_URL dans votre fichier .env');
    console.log('   Exemple: SUPABASE_URL="https://your-project.supabase.co"');
    return;
  }
  
  if (!supabaseKey || supabaseKey === 'your-supabase-anon-key') {
    console.error('‚ùå SUPABASE_ANON_KEY non configur√© ou utilise la valeur par d√©faut');
    console.log('üìù Veuillez configurer SUPABASE_ANON_KEY dans votre fichier .env');
    console.log('   Exemple: SUPABASE_ANON_KEY="your-supabase-anon-key"');
    return;
  }
  
  console.log('‚úÖ Variables d\'environnement configur√©es');
  console.log(`   SUPABASE_URL: ${supabaseUrl}`);
  console.log(`   SUPABASE_ANON_KEY: ${supabaseKey.substring(0, 20)}...`);

  try {
    // 1. Test d'initialisation du bucket
    console.log('\n1Ô∏è‚É£ Test d\'initialisation du bucket...');
    const initResult = await supabaseStorage.ensureBucketExists();
    if (initResult.success) {
      console.log('‚úÖ Bucket initialis√© avec succ√®s');
    } else {
      console.error('‚ùå Erreur initialisation bucket:', initResult.error);
      return;
    }

    // 2. Test d'upload d'un fichier de test
    console.log('\n2Ô∏è‚É£ Test d\'upload de fichier...');
    const testContent = Buffer.from('Test de compatibilit√© Supabase Storage');
    const uploadResult = await supabaseStorage.uploadFile(
      testContent,
      'test-compatibility.txt',
      'test',
      'text/plain'
    );

    if (uploadResult.success) {
      console.log('‚úÖ Upload r√©ussi:', uploadResult.url);
      
      // 3. Test de g√©n√©ration d'URL sign√©e
      console.log('\n3Ô∏è‚É£ Test d\'URL sign√©e...');
      const signedResult = await supabaseStorage.getSignedUrl(uploadResult.path, 3600);
      
      if (signedResult.success) {
        console.log('‚úÖ URL sign√©e g√©n√©r√©e:', signedResult.url);
      } else {
        console.error('‚ùå Erreur URL sign√©e:', signedResult.error);
      }

      // 4. Test de suppression
      console.log('\n4Ô∏è‚É£ Test de suppression...');
      const deleteResult = await supabaseStorage.deleteFile(uploadResult.path);
      
      if (deleteResult.success) {
        console.log('‚úÖ Fichier supprim√© avec succ√®s');
      } else {
        console.error('‚ùå Erreur suppression:', deleteResult.error);
      }

    } else {
      console.error('‚ùå Erreur upload:', uploadResult.error);
    }

    // 5. Test des endpoints
    console.log('\n5Ô∏è‚É£ Test des endpoints...');
    console.log('‚úÖ Endpoints configur√©s:');
    console.log('   - /api/uploads/certificats/:filename');
    console.log('   - /api/uploads/etablissements/:filename');
    console.log('   - /api/admin/document/:id/view');
    console.log('   - /api/admin/document/:id/download');

    console.log('\nüéâ Tous les tests de compatibilit√© sont pass√©s !');
    console.log('\nüìã R√©sum√© de la migration:');
    console.log('‚úÖ Bucket Supabase cr√©√© automatiquement');
    console.log('‚úÖ Upload de fichiers vers Supabase');
    console.log('‚úÖ URLs sign√©es pour l\'acc√®s s√©curis√©');
    console.log('‚úÖ Routes backend compatibles');
    console.log('‚úÖ Fonctions frontend compatibles');
    console.log('‚úÖ Migration des fichiers existants possible');

  } catch (error) {
    console.error('‚ùå Erreur test compatibilit√©:', error);
    process.exit(1);
  }
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
  testSupabaseCompatibility();
}

module.exports = { testSupabaseCompatibility };
