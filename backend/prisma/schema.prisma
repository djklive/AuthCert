generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Apprenant {
  id_apprenant     Int            @id @default(autoincrement())
  email            String         @unique
  motDePasse       String
  statut           Statut         @default(EN_ATTENTE)
  dateCreation     DateTime       @default(now())
  dateModification DateTime       @updatedAt
  nom              String
  telephone        String?
  prenom           String
  
  // Relations many-to-many avec les établissements
  liaisons         LiaisonApprenantEtablissement[]

  @@map("apprenants")
}

model Etablissement {
  id_etablissement                  Int                     @id @default(autoincrement())
  nomEtablissement                  String
  emailEtablissement                String                  @unique
  motDePasseEtablissement           String
  rccmEtablissement                 String                  @unique
  typeEtablissement                 TypeEtablissement
  dateCreation                      DateTime                @default(now())
  dateModification                  DateTime                @updatedAt
  adresseEtablissement              String
  telephoneEtablissement            String
  nomResponsableEtablissement       String
  emailResponsableEtablissement     String
  telephoneResponsableEtablissement String
  statut                            Statut                  @default(EN_ATTENTE)
  
  // Relations many-to-many avec les apprenants
  liaisons                          LiaisonApprenantEtablissement[]
  documents                         DocumentEtablissement[]

  @@map("etablissements")
}

model Admin {
  id_admin         Int      @id @default(autoincrement())
  email            String   @unique
  motDePasse       String
  statut           Statut   @default(ACTIF)
  dateCreation     DateTime @default(now())
  dateModification DateTime @updatedAt
  nom              String
  prenom           String

  @@map("admins")
}

model Session {
  id        String   @id @default(cuid())
  userId    Int
  userType  String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("sessions")
}

model DocumentEtablissement {
  id              Int            @id @default(autoincrement())
  etablissementId Int
  typeDocument    String
  nomFichier      String
  typeMime        String
  tailleFichier   Int
  cheminFichier   String?
  statut          StatutDocument @default(EN_ATTENTE)
  dateUpload      DateTime       @default(now())
  dateValidation  DateTime?
  commentaires    String?
  etablissement   Etablissement  @relation(fields: [etablissementId], references: [id_etablissement])

  @@map("documents_etablissement")
}

enum Statut {
  EN_ATTENTE
  ACTIF
  SUSPENDU
  REJETE
}

enum TypeEtablissement {
  UNIVERSITE_PUBLIQUE
  UNIVERSITE_PRIVEE
  INSTITUT_SUPERIEUR
  ECOLE_TECHNIQUE
  CENTRE_FORMATION
  AUTRE
}

enum StatutDocument {
  EN_ATTENTE
  VALIDE
  REJETE
  EXPIRED
}

// Nouveau modèle pour gérer les liaisons many-to-many entre apprenants et établissements
model LiaisonApprenantEtablissement {
  id                Int      @id @default(autoincrement())
  apprenantId       Int
  etablissementId   Int
  statutLiaison     StatutLiaison @default(EN_ATTENTE)
  dateDemande       DateTime @default(now())
  dateApprobation   DateTime?
  dateRejet         DateTime?
  messageDemande    String?
  messageReponse    String?
  approuvePar       Int?     // ID de l'admin qui a approuvé
  
  // Relations
  apprenant         Apprenant @relation(fields: [apprenantId], references: [id_apprenant], onDelete: Cascade)
  etablissement     Etablissement @relation(fields: [etablissementId], references: [id_etablissement], onDelete: Cascade)
  
  @@unique([apprenantId, etablissementId])
  @@map("liaisons_apprenant_etablissement")
}

enum StatutLiaison {
  EN_ATTENTE
  APPROUVE
  REJETE
  SUSPENDU
}
